clls() {
  truncate -s 0 /tmp/k8s-clusters.tmp
  regions=( $(aws account list-regions | jq -r '.Regions[].RegionName') )
  N=20
  (
  for region in "${regions[@]}"; do
    ((i=i%N)); ((i++==0)) && wait
    aws eks list-clusters --region "$region" 2>/dev/null | jq -r '.clusters[]' | sed -Ee "s/(.*)/$region - \1/g" >> /tmp/k8s-clusters.tmp &
  done
  wait
  )
  echo "Available EKS clusters:"
  cat -n /tmp/k8s-clusters.tmp
  echo -ne "Select cluster index: "
  read cluster_select

  if [[ $cluster_select < 1 || $cluster_select > $(wc -l /tmp/k8s-clusters.tmp) ]]; then
    echo "Please select a valid index."
  else
    line=$(sed -n "$cluster_select{p;q}" < /tmp/k8s-clusters.tmp)
    region=$(echo $line | awk '{print $1}')
    cluster=$(echo $line | awk '{print $3}')
    export AWS_REGION=$region
    clset $cluster
    echo "Selected $cluster in $region, now you can access the cluster!"
  fi
}

clset() {
	export KUBECONFIG="$HOME/.kube/$1"
	touch $KUBECONFIG
	aws eks update-kubeconfig --name $1
}

kdebug() {
	kubectl debug node/$1 -it --image=ubuntu
}

_lima() {
	port=$(limactl list --json | jq .sshLocalPort)
	if [ -n $port ]; then
		ssh lima@127.0.0.1 -p $port
	else
		echo "VM not started"
	fi
}

rebase() {
  if [ ! -z $1 ]; then
    branch=$1
  else
    branch="master"
  fi
  git fetch --all
  git rebase origin/$branch
  git push -f
}
