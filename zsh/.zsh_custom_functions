clls() {
  TMP_FILE="/tmp/k8s-clusters-$(date +%s).tmp"
  regions=($(aws account list-regions | jq -r '.Regions[].RegionName'))
  N=20
  (
    for region in "${regions[@]}"; do
      ((i = i % N))
      ((i++ == 0)) && wait
      aws eks list-clusters --region "$region" 2>/dev/null | jq -r '.clusters[]' | sed -Ee "s/(.*)/$region - \1/g" >>$TMP_FILE &
    done
    wait
  )

  cluster_select=$(cat $TMP_FILE | fzf --prompt "Select EKS Cluster:")
  region=$(echo $cluster_select | awk -F '( - )' '{print $1}')
  cluster=$(echo $cluster_select | awk -F '( - )' '{print $2}')
  export AWS_REGION=$region
  (clset $cluster && echo "Selected $cluster in $region, now you can access the cluster!") || unset AWS_REGION

  [[ ! -e $TMP_FILE ]] || rm $TMP_FILE
}

clset() {
  if [ -z "$1" ]; then
    echo "Usage: clset <cluster-name>"
    return 1
  fi
  export KUBECONFIG="$HOME/.kube/$1"
  touch $KUBECONFIG
  aws eks update-kubeconfig --name $1 && chmod 600 $KUBECONFIG
}

kdebug() {
  kubectl debug node/$1 -it --image=ubuntu
}

_lima() {
  port=$(limactl list --json | jq .sshLocalPort)
  if [ -n $port ]; then
    ssh lima@127.0.0.1 -p $port
  else
    echo "VM not started"
  fi
}

rebase() {
  if [ ! -z $1 ]; then
    branch=$1
  else
    branch="master"
  fi
  git fetch --all
  git rebase origin/$branch
  git push -f
}

generate_aws_exports() {
  if [ -z "$1" ]; then
    PROFILE="default"
  else
    PROFILE=$1
  fi

  awk -v profile="$PROFILE" '
  /^\[/{f=0} 
  /^\[/{if ($1 == "[" profile "]") f=1} 
  f && /aws_access_key_id/{print "export AWS_ACCESS_KEY_ID=" $3} 
  f && /aws_secret_access_key/{print "export AWS_SECRET_ACCESS_KEY=" $3}
  f && /aws_session_token/{print "export AWS_SESSION_TOKEN=" $3}
  ' ~/.aws/credentials
}

get_aws_federated_url() {
  # Ensure required environment variables are set
  if [ -z "$AWS_ACCESS_KEY_ID" ] || [ -z "$AWS_SECRET_ACCESS_KEY" ] || [ -z "$AWS_SESSION_TOKEN" ]; then
    echo "Please set AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, and AWS_SESSION_TOKEN environment variables."
    return 1
  fi

  # Create JSON session data
  session_data=$(jq -n --arg sessionId "$AWS_ACCESS_KEY_ID" --arg sessionKey "$AWS_SECRET_ACCESS_KEY" --arg sessionToken "$AWS_SESSION_TOKEN" \
    '{sessionId: $sessionId, sessionKey: $sessionKey, sessionToken: $sessionToken}')

  # Define AWS federated sign-in endpoint
  aws_federated_signin_endpoint="https://signin.aws.amazon.com/federation"

  # Get the sign-in token
  response=$(curl -s -G "$aws_federated_signin_endpoint" --data-urlencode "Action=getSigninToken" --data-urlencode "SessionDuration=43200" --data-urlencode "Session=$session_data")
  signin_token=$(echo "$response" | jq -r '.SigninToken')

  if [ -z "$signin_token" ]; then
    echo "Failed to get a sign-in token from the AWS sign-in federation endpoint."
    return 1
  fi

  echo "Got a sign-in token from the AWS sign-in federation endpoint."

  # Create the federated URL
  query_string=$(jq -rn --arg Action "login" --arg Issuer "" --arg Destination "https://console.aws.amazon.com/" --arg SigninToken "$signin_token" \
    '{Action: $Action, Issuer: $Issuer, Destination: $Destination, SigninToken: $SigninToken} | to_entries | map("\(.key)=\(.value|@uri)") | join("&")')

  federated_url="$aws_federated_signin_endpoint?$query_string"

  # Output the URL as a clickable hyperlink
  echo -e "${federated_url}"
}
